<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAGACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqHR8pGRlEKiJFKyVMNSMsIhUDBQU/Kx83Ih4rGRgm
        GRs9KB0gGA8AAAIsIRY/Kx1dRCZoRyVEMBwmGg8KAwAGEhgRRGMTPVgIEhwGAwAvHxBBLxxAMBw7Lhw4
        KRsyIxk3JhsJBwgNCwcvIRcsIBhNNR5NMhw7JxszHxUoGxYyHxsyHxsvHRszICMAAAAAAAAkGBk0IBpQ
        NCVXPSdNOSIdFw8JCAc/Kx04Jh42IR0vGxtVOSNxUicIBwYJCQl1VCude1FYPiAMBAEAAAAPL0Ubdqsc
        f7kYa54ST3ILMUkAAgUrHA6SYSqGVCJaPh1LOB0tIRQAAAEqIBNBMR1CLxxLLhdZORxLMRtaNxpIMB0+
        LBw8KhxAKx0zHh0AAAAAAAAyHxtePyyFc257bmh5a2ZcV1tlXl+Ab2t7bGl3Zmh4aGp7bGeGdGlwZGNW
        Ulh9bmeFc2hWUldXWGJkeI9lfpduiqZicYFlcYJylLJsl7lhfZdWUllsXVucf2mli3eOemt1a2hgWl16
        bWeGdGmLdWiAbWN7a2R/bmiCcGd4amdZSkBHMiJELyBCLCAAAAAAAAAtGxlJLyauprGuprGuprGuprGu
        prGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGu
        prGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprF2aGVELRxJMSFBLSIA
        AAAAAAArGhkwHByuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGu
        prGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGuprGu
        prGuprGuprGuprGFdGtdRC1EMCE9KR4AAAAAAAAzIB07JiFVPSZ1TSBSMRIAAwRFMRtpRyNjRyd0VjGM
        YSycbC5/WzAoHRIAAAAOFBwLEBcfMT8dND8LCTYODlIKCjsFBRwHBygQEFoVFXcIBygdJyYjLjcGBAUI
        BggDAgEfGBF1Vi6UdEF4WSx3Wjd2USZpQRVoQxxhQB5QOyRVPSNQOSFELxxGNCAAAAAAAAA6JSA6JSBT
        Ox9TORsZEAgVEg1UPCB+WCptTil/XjGbbzaSZzQuIRQAAAANHCc3dqc5bpYEAQAAAAAICBsMDEoTE28T
        E2kTE2wVFXgQEFsJCBEDAAACAABKbIhbkrQMEBITDAhsUCybf1iJaT59ZUeJbU+BXzhwTipeQSNfQiJO
        OB5QOyFKNyAvIxUAAAAAAAAwHB46JR1mRSNVPSEAAwU4Jhl/XzOVf2KilIutoqiak52NhpB/eYJsaHJU
        dZdSnsw7W3QeHR1LTEscHQ8eHTF3cZKNhpCSi5SRi6ZYVF4iIhU1ODYWERBEYXVxvehGg6wKCxAYDwl4
        VjKjnI+dh3aGbUuPdVOKakJ6WjZuTSZINB0wJBgQDAgAAAEAAAAAAABDJilHKydpSCVMNx0AAwRURDSl
        l5epoaxrZW00LzUmIicmIicmIicmIic3MzhhX2oiHR1dXl14fn5PU044NTUmIicmIicmIicxLTJ1b3ed
        mKBWWFlQUU8aFxdNeJRdruU9bI8WFBUqIyCqnJuroKOQZzaQaDtwUSxNOiImGxIJBwUAAAAAAgMbFg4A
        AAAAAAAsHhg/KyBVPiEzJhUhICOpn6iblJ45NTomIicmIicmIicmIicmIicmIicmIicmIic/O0FmaGlz
        dXVzdXQ8OTYmIicmIicmIicmIicmIidjXWWjnqZ7fn43NjQZFhJeiKtTpN4rKzImIieknKeuprGhgVx5
        UyUjFwwAAAEAAAAGBwc5JxRMMxpLNSAAAAAAAAAAAAAEBgUiGRIvJh2dlZ+jm6Y1MDYmIicmIicmIicm
        IicmIicmIicmIicmIicmIicmIidEP0Wbnp60trREQT4mIicmIicmIicmIicmIicmIieRipRsa24jJCQl
        Ih8uMTNWgqMmIicmIidybHSuprGNgX4HBwUAAAIZEw0HBwcFBgZYORpuRCFKLRsAAAAAAAArHBgaEw0B
        AgNjX2WuprFWUFgmIicmIicmIicmIicmIicmIicmIicmIicmIicmIicmIicmIieQjZG8vbxFQT8mIicm
        IicmIicmIicmIicmIiddWF94cnlaXFxkZmUmIB4oKjEmIicmIic5NTquprGro64ODhBCNilaRCo3JhQD
        AwQAAAEuHxRMMCAAAAAAAABGKydMMiZINyWooKqhmaQoJCkmIicmIicmIicjHyRMWWU9V2xLYnhmX2Yq
        JismIicmIicmIidDP0W+w8UlJBgREWUeHXQmIicmIicmIicmIidOSVCmoaiSlJRucXFMS0slISYmIicm
        IicmIieIgYuuprF8bGNqTCxjUj1ONx83KRcLDAgAAAEvHxcAAAAAAAA6JR5FKyNhT0muprF9dn8mIicm
        IicmIicmIicTExN+qMpwlbMgIB85NzdsZm4mIicmIicmIicmIieyt7YUEwQQEFweHo8mIicmIicmIicm
        IidcVl22s7qnqqqLjY1HRkkmIicmIicmIicmIidQS1KuprGpnaKZazJxWz1XSDQ+LBw6KhwTDwsAAQIA
        AAAAAAAsHBxCKh12YliuprFsZm4mIicmIicmIichHSIQDg8YHCMeJiwcGhhJTEyTjZZIQ0pIQ0pIQ0pI
        Q0qTlZkVFQcTE2kwLVYmIicmIicmIicmIieGf4nGyM2+w8W9wsI1MjYmIicmIicmIicmIicpJSqgmKKu
        prGif12SZS1zVjBSOiFFLCA2JBwUDgwAAAAAAAAlFxdALByEcWWuprFrZW0mIicmIicmIicoJy1hj78z
        RlkCAAAhICBaXFx9foCXmZyytrrM0NXY3uKyubkfHxUUE1snIygmIicmIicmIidAO0Gmn6m7wMHk6euj
        pqgmIicmIicmIicmIicmIicmIidoYmquprGjlJOdknGBXS5RNxtSOCE/KR09Kx0AAAAAAAArGhhMNiR2
        ZFquprF3cXkmIicmIicmIicmIyhuk6pRZ3gPCQUbGhoSERFKSEwmIicmIic9Oj9ZV1ufpaQZGBcdGyYm
        IicmIicmIicmIieGf4iFhIhPUVDr8PNcW18mIicmIicmIicmIicmIicmIic0LzWtpbCtpa+glXmacTxc
        Px9XOyJhSDA6KBwAAAAAAAA6JiBROSVtVEOuprGblJ4mIicmIicmIicmIicvNUIUEQ8jIiJxdnZXV1wt
        KS4mIicmIicmIicyLTOVl5cMDAUuKzYmIicmIicmIicmIieMho/W3eBKSUqDgoMoJCkmIicmIicmIicq
        JismIicmIicmIieEfYauprGZg3SdcT50USZkSCZRNyFONx8AAAAAAAA4JRxYQCdRNR6roaiuprFLRk0m
        IicmIicmIicmIicmIicwLjE9Oj4mIicmIicmIicmIicmIidmYWgfHRwNDQM7N1smIicmIicmIicmIicv
        KjBTUFSanJwiICMmIicmIicmIiczLjRcV14mIicmIicmIidJREuuprGnnqefeU6CYzNxUitlRCVYPCEA
        AAAAAABFMCI6Kxs/KhaZfmyuprGak50tKS4mIicmIicmIicmIicmIicmIicmIicmIicmIicmIic1MDZX
        VFlVV1YrKxk4NW8mIicmIicmIicmIicmIicmIie2r7gnJCgmIicmIicmIidaVFuGf4kmIicmIicmIicm
        Iieakp2uprGjjHiYbTZtTilZPiFTOSIAAAAAAAA8KB8/Kx9bPh+QYiyrm5uuprGNho8vKjAmIicmIicm
        IicmIicmIicmIicmIicmIicyLjN/eYGlqquprq8cHg0WFmVVUFomIicmIicmIicmIicmIieAeoMmIicm
        IicmIicmIieAeoOro64qJismIicmIicmIidjXWWuprGhk5Odcj1fRCNJMhpBKxwAAAAAAAA9Kh4+LBxm
        Rh+dbzN3WDeblJ6uprGblJ5PSlEmIicmIicmIicmIicmIicmIidSTVSYkZtZWlz///+orKshIhYVFXle
        WrdbVVwmIicmIicmIicmIidJREsmIicmIicmIicoJCmmnqiuprFQTVEmIicmIicmIicvKzCqoq2uprGf
        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
        UzJrRytqSSxONyA5Jxk/LhxKNyBiRyRGMhsaEwwCAAAFBgcWO04ZS2cIDxIGAAAjFgxAMBxjRyZJMhtB
        LBs/KRdAKxpGLiA4Ixw4Ix4ICAkUEA1TNyRXOSNbPSZRNSFEKyBUOCVZPSI1IR0AAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>